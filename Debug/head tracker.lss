
head tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000104d4  2**0
                  CONTENTS
  2 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002000  20000020  20000020  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000104fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00009067  00000000  00000000  00010555  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146b  00000000  00000000  000195bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000d73  00000000  00000000  0001aa27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000220  00000000  00000000  0001b79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000170  00000000  00000000  0001b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015552  00000000  00000000  0001bb2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006c49  00000000  00000000  0003107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007b18c  00000000  00000000  00037cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000378  00000000  00000000  000b2e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00       . %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	000004d4 	.word	0x000004d4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	000004d4 	.word	0x000004d4
 10c:	000004d4 	.word	0x000004d4
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	000001fd 	.word	0x000001fd

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
 128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
 12a:	429a      	cmp	r2, r3
 12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
 12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
 130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
 132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 134:	6811      	ldr	r1, [r2, #0]
 136:	6019      	str	r1, [r3, #0]
 138:	3304      	adds	r3, #4
 13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
 13e:	428b      	cmp	r3, r1
 140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
 144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
 146:	2200      	movs	r2, #0
 148:	601a      	str	r2, [r3, #0]
 14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
 14e:	4293      	cmp	r3, r2
 150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
 154:	21ff      	movs	r1, #255	; 0xff
 156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
 158:	438b      	bics	r3, r1
 15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 15c:	39fd      	subs	r1, #253	; 0xfd
 15e:	2390      	movs	r3, #144	; 0x90
 160:	005b      	lsls	r3, r3, #1
 162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
 164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	2503      	movs	r5, #3
 16c:	43ab      	bics	r3, r5
 16e:	2402      	movs	r4, #2
 170:	4323      	orrs	r3, r4
 172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 174:	78d3      	ldrb	r3, [r2, #3]
 176:	270c      	movs	r7, #12
 178:	43bb      	bics	r3, r7
 17a:	2608      	movs	r6, #8
 17c:	4333      	orrs	r3, r6
 17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
 182:	7b98      	ldrb	r0, [r3, #14]
 184:	2230      	movs	r2, #48	; 0x30
 186:	4390      	bics	r0, r2
 188:	2220      	movs	r2, #32
 18a:	4310      	orrs	r0, r2
 18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 18e:	7b99      	ldrb	r1, [r3, #14]
 190:	43b9      	bics	r1, r7
 192:	4331      	orrs	r1, r6
 194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 196:	7b9a      	ldrb	r2, [r3, #14]
 198:	43aa      	bics	r2, r5
 19a:	4322      	orrs	r2, r4
 19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
 1a0:	6851      	ldr	r1, [r2, #4]
 1a2:	2380      	movs	r3, #128	; 0x80
 1a4:	430b      	orrs	r3, r1
 1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
 1aa:	4798      	blx	r3
        main();
 1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
 1ae:	4798      	blx	r3
 1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
 1b2:	46c0      	nop			; (mov r8, r8)
 1b4:	000004d4 	.word	0x000004d4
 1b8:	20000000 	.word	0x20000000
 1bc:	20000000 	.word	0x20000000
 1c0:	20000000 	.word	0x20000000
 1c4:	20000020 	.word	0x20000020
 1c8:	e000ed00 	.word	0xe000ed00
 1cc:	00000000 	.word	0x00000000
 1d0:	41007000 	.word	0x41007000
 1d4:	41005000 	.word	0x41005000
 1d8:	41004800 	.word	0x41004800
 1dc:	41004000 	.word	0x41004000
 1e0:	0000046d 	.word	0x0000046d
 1e4:	00000449 	.word	0x00000449

000001e8 <delay_driver_init>:
#include <hal_init.h>
#include <hpl_gclk_base.h>
#include <hpl_pm_base.h>

void delay_driver_init(void)
{
 1e8:	b510      	push	{r4, lr}
	delay_init(SysTick);
 1ea:	4802      	ldr	r0, [pc, #8]	; (1f4 <delay_driver_init+0xc>)
 1ec:	4b02      	ldr	r3, [pc, #8]	; (1f8 <delay_driver_init+0x10>)
 1ee:	4798      	blx	r3
}
 1f0:	bd10      	pop	{r4, pc}
 1f2:	46c0      	nop			; (mov r8, r8)
 1f4:	e000e010 	.word	0xe000e010
 1f8:	00000255 	.word	0x00000255

000001fc <system_init>:

void system_init(void)
{
 1fc:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 1fe:	4b10      	ldr	r3, [pc, #64]	; (240 <system_init+0x44>)
 200:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 202:	22c0      	movs	r2, #192	; 0xc0
 204:	05d2      	lsls	r2, r2, #23
 206:	2304      	movs	r3, #4
 208:	6053      	str	r3, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 20a:	4b0e      	ldr	r3, [pc, #56]	; (244 <system_init+0x48>)
 20c:	490e      	ldr	r1, [pc, #56]	; (248 <system_init+0x4c>)
 20e:	6299      	str	r1, [r3, #40]	; 0x28
 210:	21c0      	movs	r1, #192	; 0xc0
 212:	0609      	lsls	r1, r1, #24
 214:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 216:	2442      	movs	r4, #66	; 0x42
 218:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
 21a:	2001      	movs	r0, #1
 21c:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 21e:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 220:	2180      	movs	r1, #128	; 0x80
 222:	0289      	lsls	r1, r1, #10
 224:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 226:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 228:	2280      	movs	r2, #128	; 0x80
 22a:	05d2      	lsls	r2, r2, #23
 22c:	629a      	str	r2, [r3, #40]	; 0x28
 22e:	4a07      	ldr	r2, [pc, #28]	; (24c <system_init+0x50>)
 230:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 232:	2151      	movs	r1, #81	; 0x51
 234:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 236:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 238:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(BLUELED, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(BLUELED, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
 23a:	4b05      	ldr	r3, [pc, #20]	; (250 <system_init+0x54>)
 23c:	4798      	blx	r3
}
 23e:	bd10      	pop	{r4, pc}
 240:	00000295 	.word	0x00000295
 244:	41004400 	.word	0x41004400
 248:	40000004 	.word	0x40000004
 24c:	c0000002 	.word	0xc0000002
 250:	000001e9 	.word	0x000001e9

00000254 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 254:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 256:	4b02      	ldr	r3, [pc, #8]	; (260 <delay_init+0xc>)
 258:	6018      	str	r0, [r3, #0]
 25a:	4b02      	ldr	r3, [pc, #8]	; (264 <delay_init+0x10>)
 25c:	4798      	blx	r3
}
 25e:	bd10      	pop	{r4, pc}
 260:	2000001c 	.word	0x2000001c
 264:	000003fd 	.word	0x000003fd

00000268 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 268:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 26a:	4b04      	ldr	r3, [pc, #16]	; (27c <delay_ms+0x14>)
 26c:	681c      	ldr	r4, [r3, #0]
 26e:	4b04      	ldr	r3, [pc, #16]	; (280 <delay_ms+0x18>)
 270:	4798      	blx	r3
 272:	0001      	movs	r1, r0
 274:	0020      	movs	r0, r4
 276:	4b03      	ldr	r3, [pc, #12]	; (284 <delay_ms+0x1c>)
 278:	4798      	blx	r3
}
 27a:	bd10      	pop	{r4, pc}
 27c:	2000001c 	.word	0x2000001c
 280:	00000289 	.word	0x00000289
 284:	00000409 	.word	0x00000409

00000288 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
 288:	0103      	lsls	r3, r0, #4
 28a:	1a1b      	subs	r3, r3, r0
 28c:	015a      	lsls	r2, r3, #5
 28e:	2064      	movs	r0, #100	; 0x64
 290:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 292:	4770      	bx	lr

00000294 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 294:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 296:	4a08      	ldr	r2, [pc, #32]	; (2b8 <_init_chip+0x24>)
 298:	6853      	ldr	r3, [r2, #4]
 29a:	2102      	movs	r1, #2
 29c:	430b      	orrs	r3, r1
 29e:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
 2a0:	4b06      	ldr	r3, [pc, #24]	; (2bc <_init_chip+0x28>)
 2a2:	4798      	blx	r3
	_sysctrl_init_sources();
 2a4:	4b06      	ldr	r3, [pc, #24]	; (2c0 <_init_chip+0x2c>)
 2a6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
 2a8:	2002      	movs	r0, #2
 2aa:	4c06      	ldr	r4, [pc, #24]	; (2c4 <_init_chip+0x30>)
 2ac:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
 2ae:	4b06      	ldr	r3, [pc, #24]	; (2c8 <_init_chip+0x34>)
 2b0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 2b2:	20fd      	movs	r0, #253	; 0xfd
 2b4:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
 2b6:	bd10      	pop	{r4, pc}
 2b8:	41004000 	.word	0x41004000
 2bc:	0000030d 	.word	0x0000030d
 2c0:	0000032d 	.word	0x0000032d
 2c4:	000002cd 	.word	0x000002cd
 2c8:	00000361 	.word	0x00000361

000002cc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 2cc:	07c3      	lsls	r3, r0, #31
 2ce:	d509      	bpl.n	2e4 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
 2d0:	4b0b      	ldr	r3, [pc, #44]	; (300 <_gclk_init_generators_by_fref+0x34>)
 2d2:	2280      	movs	r2, #128	; 0x80
 2d4:	0052      	lsls	r2, r2, #1
 2d6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 2d8:	4a0a      	ldr	r2, [pc, #40]	; (304 <_gclk_init_generators_by_fref+0x38>)
 2da:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 2dc:	4b08      	ldr	r3, [pc, #32]	; (300 <_gclk_init_generators_by_fref+0x34>)
 2de:	785b      	ldrb	r3, [r3, #1]
 2e0:	09db      	lsrs	r3, r3, #7
 2e2:	d1fb      	bne.n	2dc <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
 2e4:	0783      	lsls	r3, r0, #30
 2e6:	d509      	bpl.n	2fc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
 2e8:	4b05      	ldr	r3, [pc, #20]	; (300 <_gclk_init_generators_by_fref+0x34>)
 2ea:	2202      	movs	r2, #2
 2ec:	32ff      	adds	r2, #255	; 0xff
 2ee:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 2f0:	4a05      	ldr	r2, [pc, #20]	; (308 <_gclk_init_generators_by_fref+0x3c>)
 2f2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 2f4:	4b02      	ldr	r3, [pc, #8]	; (300 <_gclk_init_generators_by_fref+0x34>)
 2f6:	785b      	ldrb	r3, [r3, #1]
 2f8:	09db      	lsrs	r3, r3, #7
 2fa:	d1fb      	bne.n	2f4 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
 2fc:	4770      	bx	lr
 2fe:	46c0      	nop			; (mov r8, r8)
 300:	40000c00 	.word	0x40000c00
 304:	00090700 	.word	0x00090700
 308:	00090501 	.word	0x00090501

0000030c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
 30c:	4b06      	ldr	r3, [pc, #24]	; (328 <_pm_init+0x1c>)
 30e:	7a1a      	ldrb	r2, [r3, #8]
 310:	b2d2      	uxtb	r2, r2
 312:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
 314:	7a5a      	ldrb	r2, [r3, #9]
 316:	b2d2      	uxtb	r2, r2
 318:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
 31a:	7a9a      	ldrb	r2, [r3, #10]
 31c:	b2d2      	uxtb	r2, r2
 31e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
 320:	7ada      	ldrb	r2, [r3, #11]
 322:	b2d2      	uxtb	r2, r2
 324:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
 326:	4770      	bx	lr
 328:	40000400 	.word	0x40000400

0000032c <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
 32c:	4b0b      	ldr	r3, [pc, #44]	; (35c <_sysctrl_init_sources+0x30>)
 32e:	2287      	movs	r2, #135	; 0x87
 330:	0052      	lsls	r2, r2, #1
 332:	829a      	strh	r2, [r3, #20]
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 334:	699a      	ldr	r2, [r3, #24]
 336:	2102      	movs	r1, #2
 338:	430a      	orrs	r2, r1
 33a:	619a      	str	r2, [r3, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
 33c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
 33e:	311d      	adds	r1, #29
 340:	400a      	ands	r2, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
 342:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
 344:	4b05      	ldr	r3, [pc, #20]	; (35c <_sysctrl_init_sources+0x30>)
 346:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
 348:	079b      	lsls	r3, r3, #30
 34a:	d5fb      	bpl.n	344 <_sysctrl_init_sources+0x18>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
 34c:	4a03      	ldr	r2, [pc, #12]	; (35c <_sysctrl_init_sources+0x30>)
 34e:	8a93      	ldrh	r3, [r2, #20]
 350:	2180      	movs	r1, #128	; 0x80
 352:	430b      	orrs	r3, r1
 354:	b29b      	uxth	r3, r3
 356:	8293      	strh	r3, [r2, #20]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
 358:	4770      	bx	lr
 35a:	46c0      	nop			; (mov r8, r8)
 35c:	40000800 	.word	0x40000800

00000360 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
 360:	2282      	movs	r2, #130	; 0x82
 362:	01d2      	lsls	r2, r2, #7
 364:	4b1c      	ldr	r3, [pc, #112]	; (3d8 <_sysctrl_init_referenced_generators+0x78>)
 366:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 368:	2202      	movs	r2, #2
 36a:	4b1c      	ldr	r3, [pc, #112]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 36c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 36e:	4b1b      	ldr	r3, [pc, #108]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 370:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 372:	06db      	lsls	r3, r3, #27
 374:	d5fb      	bpl.n	36e <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
 376:	4a1a      	ldr	r2, [pc, #104]	; (3e0 <_sysctrl_init_referenced_generators+0x80>)
 378:	4b18      	ldr	r3, [pc, #96]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 37a:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
 37c:	4b19      	ldr	r3, [pc, #100]	; (3e4 <_sysctrl_init_referenced_generators+0x84>)
 37e:	681b      	ldr	r3, [r3, #0]
 380:	0e9b      	lsrs	r3, r3, #26
 382:	2b3f      	cmp	r3, #63	; 0x3f
 384:	d020      	beq.n	3c8 <_sysctrl_init_referenced_generators+0x68>
 386:	029b      	lsls	r3, r3, #10
 388:	2280      	movs	r2, #128	; 0x80
 38a:	0092      	lsls	r2, r2, #2
 38c:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
 38e:	4a13      	ldr	r2, [pc, #76]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 390:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
 392:	2306      	movs	r3, #6
 394:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
 396:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
 398:	075b      	lsls	r3, r3, #29
 39a:	d518      	bpl.n	3ce <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
 39c:	4b0f      	ldr	r3, [pc, #60]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 39e:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
 3a0:	23d0      	movs	r3, #208	; 0xd0
 3a2:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
 3a4:	2bd0      	cmp	r3, #208	; 0xd0
 3a6:	d1f9      	bne.n	39c <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
 3a8:	4a0c      	ldr	r2, [pc, #48]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 3aa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 3ac:	2180      	movs	r1, #128	; 0x80
 3ae:	430b      	orrs	r3, r1
 3b0:	b29b      	uxth	r3, r3
 3b2:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
 3b4:	4b08      	ldr	r3, [pc, #32]	; (3d8 <_sysctrl_init_referenced_generators+0x78>)
 3b6:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
 3b8:	09db      	lsrs	r3, r3, #7
 3ba:	d1fb      	bne.n	3b4 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
 3bc:	4a07      	ldr	r2, [pc, #28]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 3be:	6993      	ldr	r3, [r2, #24]
 3c0:	2102      	movs	r1, #2
 3c2:	438b      	bics	r3, r1
 3c4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
 3c6:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
 3c8:	23fc      	movs	r3, #252	; 0xfc
 3ca:	01db      	lsls	r3, r3, #7
 3cc:	e7df      	b.n	38e <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
 3ce:	4b03      	ldr	r3, [pc, #12]	; (3dc <_sysctrl_init_referenced_generators+0x7c>)
 3d0:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
 3d2:	06db      	lsls	r3, r3, #27
 3d4:	d5fb      	bpl.n	3ce <_sysctrl_init_referenced_generators+0x6e>
 3d6:	e7e7      	b.n	3a8 <_sysctrl_init_referenced_generators+0x48>
 3d8:	40000c00 	.word	0x40000c00
 3dc:	40000800 	.word	0x40000800
 3e0:	040105b9 	.word	0x040105b9
 3e4:	00806024 	.word	0x00806024

000003e8 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 3e8:	4b02      	ldr	r3, [pc, #8]	; (3f4 <_system_time_init+0xc>)
 3ea:	4a03      	ldr	r2, [pc, #12]	; (3f8 <_system_time_init+0x10>)
 3ec:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 3ee:	2205      	movs	r2, #5
 3f0:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
 3f2:	4770      	bx	lr
 3f4:	e000e010 	.word	0xe000e010
 3f8:	00ffffff 	.word	0x00ffffff

000003fc <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
 3fc:	b510      	push	{r4, lr}
	_system_time_init(hw);
 3fe:	4b01      	ldr	r3, [pc, #4]	; (404 <_delay_init+0x8>)
 400:	4798      	blx	r3
}
 402:	bd10      	pop	{r4, pc}
 404:	000003e9 	.word	0x000003e9

00000408 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
 408:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
 40a:	e00b      	b.n	424 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
 40c:	4b0b      	ldr	r3, [pc, #44]	; (43c <_delay_cycles+0x34>)
 40e:	480c      	ldr	r0, [pc, #48]	; (440 <_delay_cycles+0x38>)
 410:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
 412:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 414:	4b09      	ldr	r3, [pc, #36]	; (43c <_delay_cycles+0x34>)
 416:	681b      	ldr	r3, [r3, #0]
 418:	03db      	lsls	r3, r3, #15
 41a:	d5fb      	bpl.n	414 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
 41c:	4b09      	ldr	r3, [pc, #36]	; (444 <_delay_cycles+0x3c>)
 41e:	469c      	mov	ip, r3
 420:	4461      	add	r1, ip
	while (n--) {
 422:	0010      	movs	r0, r2
 424:	1e42      	subs	r2, r0, #1
 426:	b2d2      	uxtb	r2, r2
 428:	2800      	cmp	r0, #0
 42a:	d1ef      	bne.n	40c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
 42c:	4b03      	ldr	r3, [pc, #12]	; (43c <_delay_cycles+0x34>)
 42e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
 430:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 432:	4b02      	ldr	r3, [pc, #8]	; (43c <_delay_cycles+0x34>)
 434:	681b      	ldr	r3, [r3, #0]
 436:	03db      	lsls	r3, r3, #15
 438:	d5fb      	bpl.n	432 <_delay_cycles+0x2a>
		;
}
 43a:	4770      	bx	lr
 43c:	e000e010 	.word	0xe000e010
 440:	00ffffff 	.word	0x00ffffff
 444:	ff000001 	.word	0xff000001

00000448 <main>:
#include <atmel_start.h>



int main(void)
{
 448:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 44a:	4b06      	ldr	r3, [pc, #24]	; (464 <main+0x1c>)
 44c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 44e:	2280      	movs	r2, #128	; 0x80
 450:	0292      	lsls	r2, r2, #10
 452:	23c0      	movs	r3, #192	; 0xc0
 454:	05db      	lsls	r3, r3, #23
 456:	61da      	str	r2, [r3, #28]
	while (1) {
		//Toggle Blue LED
		gpio_toggle_pin_level(BLUELED);
				
		// delay
		delay_ms(1000);
 458:	20fa      	movs	r0, #250	; 0xfa
 45a:	0080      	lsls	r0, r0, #2
 45c:	4b02      	ldr	r3, [pc, #8]	; (468 <main+0x20>)
 45e:	4798      	blx	r3
 460:	e7f5      	b.n	44e <main+0x6>
 462:	46c0      	nop			; (mov r8, r8)
 464:	00000115 	.word	0x00000115
 468:	00000269 	.word	0x00000269

0000046c <__libc_init_array>:
 46c:	b570      	push	{r4, r5, r6, lr}
 46e:	2600      	movs	r6, #0
 470:	4d0c      	ldr	r5, [pc, #48]	; (4a4 <__libc_init_array+0x38>)
 472:	4c0d      	ldr	r4, [pc, #52]	; (4a8 <__libc_init_array+0x3c>)
 474:	1b64      	subs	r4, r4, r5
 476:	10a4      	asrs	r4, r4, #2
 478:	42a6      	cmp	r6, r4
 47a:	d109      	bne.n	490 <__libc_init_array+0x24>
 47c:	2600      	movs	r6, #0
 47e:	f000 f819 	bl	4b4 <_init>
 482:	4d0a      	ldr	r5, [pc, #40]	; (4ac <__libc_init_array+0x40>)
 484:	4c0a      	ldr	r4, [pc, #40]	; (4b0 <__libc_init_array+0x44>)
 486:	1b64      	subs	r4, r4, r5
 488:	10a4      	asrs	r4, r4, #2
 48a:	42a6      	cmp	r6, r4
 48c:	d105      	bne.n	49a <__libc_init_array+0x2e>
 48e:	bd70      	pop	{r4, r5, r6, pc}
 490:	00b3      	lsls	r3, r6, #2
 492:	58eb      	ldr	r3, [r5, r3]
 494:	4798      	blx	r3
 496:	3601      	adds	r6, #1
 498:	e7ee      	b.n	478 <__libc_init_array+0xc>
 49a:	00b3      	lsls	r3, r6, #2
 49c:	58eb      	ldr	r3, [r5, r3]
 49e:	4798      	blx	r3
 4a0:	3601      	adds	r6, #1
 4a2:	e7f2      	b.n	48a <__libc_init_array+0x1e>
 4a4:	000004c0 	.word	0x000004c0
 4a8:	000004c0 	.word	0x000004c0
 4ac:	000004c0 	.word	0x000004c0
 4b0:	000004c4 	.word	0x000004c4

000004b4 <_init>:
 4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4b6:	46c0      	nop			; (mov r8, r8)
 4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4ba:	bc08      	pop	{r3}
 4bc:	469e      	mov	lr, r3
 4be:	4770      	bx	lr

000004c0 <__init_array_start>:
 4c0:	000000dd 	.word	0x000000dd

000004c4 <_fini>:
 4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4c6:	46c0      	nop			; (mov r8, r8)
 4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4ca:	bc08      	pop	{r3}
 4cc:	469e      	mov	lr, r3
 4ce:	4770      	bx	lr

000004d0 <__fini_array_start>:
 4d0:	000000b5 	.word	0x000000b5
